input_num = "649713959682898259577777982349515784822684939966191359164369933435366431847754488661965363557985166219358714739318371382388296151195361571216131925158492441461844687324923315381358331571577613789649166486152237945917987977793891739865149734755993241361886336926538482271124755359572791451335842534893192693558659991171983849285489139421425933638614884415896938914992732492192458636484523228244532331587584779552788544667253577324649915274115924611758345676183443982992733966373498385685965768929241477983727921279826727976872556315428434799161759734932659829934562339385328119656823483954856427365892627728163524721467938449943358192632262354854593635831559352247443975945144163183563723562891357859367964126289445982135523535923113589316417623483631637569291941782992213889513714525342468563349385271884221685549996534333765731243895662624829924982971685443825366827923589435254514211489649482374876434549682785459698885521673258939413255158196525696236457911447599947449665542554251486847388823576937167237476556782133227279324526834946534444718161524129285919477959937684728882592779941734186144138883994322742484853925383518651687147246943421311287324867663698432546619583638976637733345251834869985746385371617743498627111441933546356934671639545342515392536574744795732243617113574641284231928489312683617154536648219244996491745718658151648246791826466973654765284263928884137863647623237345882469142933142637583644258427416972595241737254449718531724176538648369253796688931245191382956961544775856872281317743828552629843551844927913147518377362266554334386721313244223233396453291224932499277961525785755863852487141946626663835195286762947172384186667439516367219391823774338692151926472717373235612911848773387771244144969149482477519437822863422662157461968444281972353149695515494992537927492111388193837553844671719291482442337761321272333982924289323437277224565149928416255435841327756139118119744528993269157174414264387573331116323982614862952264597611885999285995516357519648695594299657387614793341626318866519144574571816535351149394735916975448425618171572917195165594323552199346814729617189679698944337146";
input_len = len(input_num)
total = 0

# Original solution: part 1
for i in range(input_len):
    digit = int(input_num[i])
    next_index = (i + 1) % input_len
    next_digit = int(input_num[next_index])

    if next_digit == digit:
        total += digit

print("The total sum is {}".format(total))

# Original solution: part 2
for i in range(input_len):
    digit = int(input_num[i])
    next_index = (i + input_len // 2) % input_len
    next_digit = int(input_num[next_index])

    if next_digit == digit:
        total += digit

"""
# Breakdown
This problem is simple, but took me embarassingly long (at least 30 minutes!).

I thought I could get away by keeping track of the previous digit, checking if the current one
is the same value, then adding the two if the values match, but:
1) Initially, only after a successful match I updated the previous digit, which isn't good
2) Then I updated the previous digit every time. This didn't work either with the add both values logic.

I think I needed to only add the previous digit to the total if I detected a match, and update
previous every time.

I abandoned the approach and just checked the next digit. I'm not sure if runtime performance
is a key goal of Advent of Code, and so actually going through each digit twice isn't as performant
(also, I'm converting string to integers too many times).

After I did that, the only thing I missed was that the list was cyclic. This was easy to add using
an extra modulo, though as shown by Norvig below, I could have exploited Python's negative indexing
to do this in a cleaner way.

Part 2 was just instead of the number to the right, check if the number half way across the list
matches. This was trivial to do, just changing the next_index calculation.

Overall: Call it being rusty with Python, right? Better luck next time...
"""

# From Peter Norvig's pytudes...
# Ingenious use of negative index to "wrap around"

total = sum([int(input_num[i]) for i in range(input_len) if input_num[i] == input_num[i - input_len // 2]])
print("The total sum is {}".format(total))
